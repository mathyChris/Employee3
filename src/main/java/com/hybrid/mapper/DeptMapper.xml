<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hybrid.mapper.DeptMapper">
    
    
    <sql id="deptFrom">
        
          select deptno, 
	    	   dname, 
	    	   loc 
	      from dept
       
    </sql>
    
    
    <sql id="deptFromWithEmp">
        
         select d.deptno as dept_deptno,
	    		d.dname  as dept_dname,
	    		d.loc    as dept_loc,
	    		e.empno  as emp_empno,
	    		e.ename  as emp_ename,
	    		e.job    as emp_job,
	    		e.mgr	 as emp_mgr,
	    		e.hiredate as emp_hiredate,
	    		e.sal    as emp_sal, 
	    		e.comm   as emp_com,
	    		e.deptno as emp_deptno
			from dept d inner join emp e 
			on d.deptno = e.deptno
        
    </sql>
    
    <sql id="deptFromWithEmp_outer">
        
         select d.deptno as dept_deptno,
	    		d.dname  as dept_dname,
	    		d.loc    as dept_loc,
	    		e.empno  as emp_empno,
	    		e.ename  as emp_ename,
	    		e.job    as emp_job,
	    		e.mgr	 as emp_mgr,
	    		e.hiredate as emp_hiredate,
	    		e.sal    as emp_sal, 
	    		e.comm   as emp_com,
	    		e.deptno as emp_deptno
	    		
			from dept d left outer join emp e 
			on d.deptno = e.deptno
        
    </sql>

    
    
	

<!--     R : read  -->

	<select id="selectAll" resultType="com.hybrid.model.Dept"> 
<!-- 	resultType 은 DEptMapper.java에서 정의한 메서드 selectAll()의 return type     -->

		<include refid="deptFrom"/>
	    
<!-- 	    SELECT DEPTNO,  -->
<!-- 	    	   DNAME,  -->
<!-- 	    	   LOC  -->
<!-- 	      FROM DEPT -->
	    
	</select>
	

	<select id="selectByDeptno" resultType="com.hybrid.model.Dept">
	    
	    <include refid="deptFrom"/>
	    where deptno = #{deptno}
	    
	</select>
	
	
<!-- 	private int empno; -->
<!-- 	private String ename;  -->
<!-- 	private String job ;  -->
<!-- 	private Integer mgr ;  -->
<!-- 	private Date hiredate ;  -->
<!-- 	private Float sal ;  -->
<!-- 	private Float comm ;  -->
<!-- 	private int deptno ; -->
<!-- 	private Dept dept;  -->


<!-- 	resultMap 은 mapping 정보를 수동으로 처리, 자동처리는 resultType  -->
	<resultMap id="deptResultMap" type="com.hybrid.model.Dept">
	    
	    <id property="deptno" column="dept_deptno"/>
	    <result property="dname" column="dept_dname"/>
	    <result property="loc" column="dept_loc"/>
	    
	    <collection property="emps" ofType="com.hybrid.model.Emp">
<!-- 	    collection tag는 has-many관계이다. -->
	    
		    <id property="empno" column="emp_empno"/> <!-- primary key는 di로 받는다.  -->
		    <result property="ename" column="emp_ename"/>
		    <result property="job" column="emp_job"/>
		    <result property="mgr" column="emp_mgr"/>
		    <result property="hiredate" column="emp_hiredate"/>
		    <result property="sal" column="emp_sal"/>
		    <result property="comm" column="emp_com"/>
<!-- 		    <result property="deptno" column="emp_deptno"/> -->
		    <association property="dept" resultMap="deptResultMap"/> <!-- has-one 관계는 <association tag로 받는다.  -->
		    
		</collection>
		
<!-- 	    <association property=""></association> 은  has-one의 관계 -->
	    
	</resultMap>
	
	
	
	<select id="selectAllWithEmps" resultMap="deptResultMap">
<!-- 	    resultType은 자동 mapping , resultMap은 resultMap 태그에 정의된 data를 이용하여 수동으로 mapping -->
	    
	    	
<!-- 	     select d.deptno as dept_deptno, -->
<!-- 	    		d.dname  as dept_dname, -->
<!-- 	    		d.loc    as dept_loc, -->
<!-- 	    		e.empno  as emp_empno, -->
<!-- 	    		e.ename  as emp_ename, -->
<!-- 	    		e.job    as emp_job, -->
<!-- 	    		e.mgr	 as emp_mgr, -->
<!-- 	    		e.hiredate as emp_hiredate, -->
<!-- 	    		e.sal    as emp_sal,  -->
<!-- 	    		e.comm   as emp_com, -->
<!-- 	    		e.deptno as emp_deptno -->
<!-- 			from dept d inner join emp e  -->
<!-- 			on d.deptno = e.deptno -->
<!-- 			order by d.deptno -->

<!-- 			<include refid="deptFromWithEmp"/> -->
			<include refid="deptFromWithEmp_outer"/>
			order by d.deptno
	    
	</select>
	
	
	
	<select id="selectByDeptnoWithEmps" resultMap="deptResultMap">
	    
<!-- 	     select d.deptno as dept_deptno, -->
<!-- 	    		d.dname  as dept_dname, -->
<!-- 	    		d.loc    as dept_loc, -->
<!-- 	    		e.empno  as emp_empno, -->
<!-- 	    		e.ename  as emp_ename, -->
<!-- 	    		e.job    as emp_job, -->
<!-- 	    		e.mgr	 as emp_mgr, -->
<!-- 	    		e.hiredate as emp_hiredate, -->
<!-- 	    		e.sal    as emp_sal,  -->
<!-- 	    		e.comm   as emp_com, -->
<!-- 	    		e.deptno as emp_deptno -->
<!-- 			from dept d inner join emp e  -->
<!-- 			on d.deptno = e.deptno -->

			<include refid="deptFromWithEmp"/>
			
			where d.deptno = #{deptno}
			order by d.deptno
	    
	</select>
	
	
	<insert id="insert" parameterType="com.hybrid.model.Dept">
	    
	    insert into dept
	    				(
	    					deptno,
	    					dname,
	    					loc
	    				)
	    			values
	    				(
	    					#{deptno},
	    					#{dname},
	    					#{loc}
	    					
	    				)
	    
	</insert>
	
	
	<delete id="delete" parameterType="com.hybrid.model.Dept">
<!-- 	    parameterType이 primitive이면 생략해도 된다. 그러나 명시적으로는 써주는게 좋다.   -->
	    
	    delete from dept 
	   		  where deptno = #{deptno}
	    
	    
	</delete>
    
	<delete id="deleteGreaterThan" parameterType="int">
	    
		delete from from 
			  where deptno >= #{deptno}  
			  <!-- myBatis에서는 > dp 에 의해 error 가 발생 , 왜? >를 xml에서 tag로 인식한다.  --> 	    
			  <!-- query 문법에서는 틀리지 않으나 xml문서에서는 >를 close 문법으로 인식, entity 라고 하는데 entity 처리를 해주어야 한다.  -->
	    
	</delete>
	
	
	<select id="selectGreaterThan" parameterType="int" resultType="com.hybrid.model.Dept">
	    
	    <include refid="deptFrom"/>
	    where deptno >= #{deptno} 
	    
	</select>
	
  
</mapper>







